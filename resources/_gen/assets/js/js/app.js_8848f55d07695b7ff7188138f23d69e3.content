(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/app"],{

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

$('.modal-toggle').on('click', function (e) {
  e.preventDefault();
  $('body').toggleClass('overflow-hidden');
  $('.modal').toggleClass('is-visible');
});
$(document).ready(function () {
  // Color Picker Tool Js
  var themeSwitchers = document.querySelectorAll('.default-switch');
  var dynamicInputs = document.querySelectorAll('input.input-color-picker');

  var handleThemeUpdate = function handleThemeUpdate(cssVars) {
    var root = document.querySelector(':root');
    var keys = Object.keys(cssVars);
    keys.forEach(function (key) {
      root.style.setProperty(key, cssVars[key]);
      $.fn.changeColorForm(key, cssVars[key]);
    });
  };

  themeSwitchers.forEach(function (item) {
    item.addEventListener('click', function (e) {
      var bgColor = e.target.getAttribute('data-bg-color');
      var color = e.target.getAttribute('data-color');
      handleThemeUpdate({
        '--primary-bg-color': bgColor,
        '--primary-color': color
      });
      $("input.input-color-picker[data-id='color']").val(color);
      $("input.input-color-picker[data-id='bg-color']").val(bgColor);
    });
  });
  dynamicInputs.forEach(function (item) {
    item.addEventListener('input', function (e) {
      var cssPropName = "--primary-".concat(e.target.getAttribute('data-id'));
      handleThemeUpdate(_defineProperty({}, cssPropName, e.target.value));
    });
  });

  $.fn.changeColorForm = function (key, color) {
    $("form[name=contact] input[name='".concat(key, "']")).val(color);
  }; //Typewriter Effect


  var TxtType = function TxtType(el, toRotate, period) {
    this.toRotate = toRotate;
    this.el = el;
    this.loopNum = 0;
    this.period = parseInt(period, 10) || 2000;
    this.txt = '';
    this.tick();
    this.isDeleting = false;
  };

  TxtType.prototype.tick = function () {
    var i = this.loopNum % this.toRotate.length;
    var fullTxt = this.toRotate[i];

    if (this.isDeleting) {
      this.txt = fullTxt.substring(0, this.txt.length - 1);
    } else {
      this.txt = fullTxt.substring(0, this.txt.length + 1);
    }

    this.el.innerHTML = '<span class="wrap">' + this.txt + '</span>';
    var that = this;
    var delta = 200 - Math.random() * 100;

    if (this.isDeleting) {
      delta /= 2;
    }

    if (!this.isDeleting && this.txt === fullTxt) {
      delta = this.period;
      this.isDeleting = true;
    } else if (this.isDeleting && this.txt === '') {
      this.isDeleting = false;
      this.loopNum++;
      delta = 500;
    }

    setTimeout(function () {
      that.tick();
    }, delta);
  };

  window.onload = function () {
    var elements = document.getElementsByClassName('typewrite');

    for (var i = 0; i < elements.length; i++) {
      var toRotate = elements[i].getAttribute('data-type');
      var period = elements[i].getAttribute('data-period');

      if (toRotate) {
        new TxtType(elements[i], JSON.parse(toRotate), period);
      }
    } // INJECT CSS


    var css = document.createElement("style");
    css.type = "text/css";
    css.innerHTML = ".typewrite > .wrap { border-right: 6px solid #fff; padding-right: 10px }";
    document.body.appendChild(css);
  };
});
/**
 * Vars
 */

var points = [];
var rafID = null;

var guiVars = function guiVars() {
  this.totalPoints = 6;
  this.viscosity = 20;
  this.mouseDist = 80;
  this.damping = 0.15;
  this.showIndicators = false;
  this.leftColor = '#9ba8b1';
  this.rightColor = '#333333';
};

var vars = new guiVars();
/**
 * Mouse handler
 */

var mouseX = 0,
    mouseY = 0,
    mouseLastX = 0,
    mouseLastY = 0,
    mouseDirectionX = 0,
    mouseDirectionY = 0,
    mouseSpeedX = 0,
    mouseSpeedY = 0; // Get mouse direction

function mouseDirection(e) {
  if (mouseX < e.pageX) mouseDirectionX = 1;else if (mouseX > e.pageX) mouseDirectionX = -1;else mouseDirectionX = 0;
  if (mouseY < e.pageY) mouseDirectionY = 1;else if (mouseY > e.pageY) mouseDirectionY = -1;else mouseDirectionY = 0;
  mouseX = e.pageX;
  mouseY = e.pageY;
}

$(document).on('mousemove', mouseDirection); // Get mouse speed

function mouseSpeed() {
  mouseSpeedX = mouseX - mouseLastX;
  mouseSpeedY = mouseY - mouseLastY;
  mouseLastX = mouseX;
  mouseLastY = mouseY;
  setTimeout(mouseSpeed, 50);
}

mouseSpeed();
/**
 * Point
 */

function Point(x, y, canvas) {
  this.x = x;
  this.ix = x;
  this.vx = 0;
  this.cx = 0;
  this.y = y;
  this.iy = y;
  this.cy = 0;
  this.canvas = canvas;
}

Point.prototype.move = function () {
  this.vx += (this.ix - this.x) / vars.viscosity;
  var dx = this.ix - mouseX,
      dy = this.y - mouseY;
  var gap = this.canvas.data('gap'); // Move point only when leaving color block

  if (mouseDirectionX > 0 && mouseX > this.x || mouseDirectionX < 0 && mouseX < this.x) {
    if (Math.sqrt(dx * dx) < vars.mouseDist && Math.sqrt(dy * dy) < gap) {
      this.vx = mouseSpeedX / 8;
    }
  }

  this.vx *= 1 - vars.damping;
  this.x += this.vx;
};
/**
 * Init canvas
 */


function initCanvas() {
  var canvas = $('canvas');
  var context = canvas.get(0).getContext('2d');
  cancelAnimationFrame(rafID); // Resize canvas

  $('canvas').get(0).width = $(window).width();
  $('canvas').get(0).height = $(window).height(); // Add points

  points = [];
  var gap = canvas.height() / (vars.totalPoints - 1);
  var pointX = $(window).width() / 2;

  for (var i = 0; i <= vars.totalPoints - 1; i++) {
    points.push(new Point(pointX, i * gap, canvas));
  } // Start render


  renderCanvas();
  canvas.data('gap', gap);
}
/**
 * Render canvas
 */


function renderCanvas() {
  var canvas = $('canvas');
  var context = canvas.get(0).getContext('2d'); // rAF

  rafID = requestAnimationFrame(renderCanvas); // Clear scene

  context.clearRect(0, 0, canvas.width(), canvas.height());
  context.fillStyle = vars.leftColor;
  context.fillRect(0, 0, canvas.width(), canvas.height()); // Move points

  for (var i = 0; i <= vars.totalPoints - 1; i++) {
    points[i].move();
  } // Draw shape


  context.fillStyle = vars.rightColor;
  context.strokeStyle = vars.rightColor;
  context.lineWidth = 1;
  context.beginPath();
  context.moveTo($(window).width() / 2, 0);

  for (var _i = 0; _i <= vars.totalPoints - 1; _i++) {
    var p = points[_i];

    if (points[_i + 1] != undefined) {
      p.cx = (p.x + points[_i + 1].x) / 2 - 0.0001; // - 0.0001 hack to fix a 1px offset bug on Chrome...

      p.cy = (p.y + points[_i + 1].y) / 2;
    } else {
      p.cx = p.ix;
      p.cy = p.iy;
    }

    context.bezierCurveTo(p.x, p.y, p.cx, p.cy, p.cx, p.cy);
  }

  context.lineTo($(window).width(), $(window).height());
  context.lineTo($(window).width(), 0);
  context.closePath();
  context.fill();

  if (vars.showIndicators) {
    // Draw points
    context.fillStyle = '#000';
    context.beginPath();

    for (var _i2 = 0; _i2 <= vars.totalPoints - 1; _i2++) {
      var _p = points[_i2];
      context.rect(_p.x - 2, _p.y - 2, 4, 4);
    }

    context.fill(); // Draw controls

    context.fillStyle = '#fff';
    context.beginPath();

    for (var _i3 = 0; _i3 <= vars.totalPoints - 1; _i3++) {
      var _p2 = points[_i3];
      context.rect(_p2.cx - 1, _p2.cy - 1, 2, 2);
    }

    context.fill();
  }
}
/**
 * Resize handler
 */


function resizeHandler() {
  initCanvas();
}

$(window).on('resize', resizeHandler).trigger('resize');
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/sass/app.scss":
/*!***************************!*\
  !*** ./src/sass/app.scss ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./src/sass/tailwind.css":
/*!*******************************!*\
  !*** ./src/sass/tailwind.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/*!*************************************************************************!*\
  !*** multi ./src/js/app.js ./src/sass/app.scss ./src/sass/tailwind.css ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/nirajan/Sites/oct-templates/portfolio/portfolio-2/portfolio-2-zaits-puncoz/themes/demozaitspuncoz/src/js/app.js */"./src/js/app.js");
__webpack_require__(/*! /Users/nirajan/Sites/oct-templates/portfolio/portfolio-2/portfolio-2-zaits-puncoz/themes/demozaitspuncoz/src/sass/app.scss */"./src/sass/app.scss");
module.exports = __webpack_require__(/*! /Users/nirajan/Sites/oct-templates/portfolio/portfolio-2/portfolio-2-zaits-puncoz/themes/demozaitspuncoz/src/sass/tailwind.css */"./src/sass/tailwind.css");


/***/ })

},[[0,"/js/manifest","/js/vendor"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,